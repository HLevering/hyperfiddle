; this file is essentially a list delimited by '/^=='
; entries can span many lines until the next delimeter

==
; entity create
{:d? true :a false}
==
(fn [ctx]
  {:entity (hypercrud.browser.auto-anchor-formula/auto-entity ctx)})


==
{:d? true :a true}
; don't set a because :a is used for card/many, we are create, so we just create one entity
==
(fn [ctx]
  {:entity (hypercrud.browser.auto-anchor-formula/auto-entity ctx)})


==
; entity create
; is it managed or not? We need a connection. Either we got the find-element, or
; we are managed. If we're managed, we need an entity in scope, to conjure a connection.
; So despite not really needing the value in scope, we need the connection, so we need the value.
; This is counter intuitive. It only happens for sys links. Regular links set the linkentity/connection
; so don't have this problem.
; Mystery deepens: If ur a syslink u better have a conn-id here because autolink inspects the entity connid to manufacture
; the right entity connection. If you're an explicit link with a conn set, it doesn't matter what you put here since the server
; will ignore this and use the explicit conn. This is only needed to plumb a connection to the autolink logic so it can choose the right connection.
{:d? false :a false}
==
(fn [ctx]
  {:entity (hypercrud.browser.auto-anchor-formula/auto-entity-from-stage ctx)})


==
{:d? false :a true}
; don't set a because :a is used for card/many, we are create, so we just create one entity
==
(fn [ctx]
  {:entity (hypercrud.browser.auto-anchor-formula/auto-entity-from-stage ctx)})
==
