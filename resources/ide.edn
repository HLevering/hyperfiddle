; AUTO-GENERATED FILE - DO NOT EDIT BY HAND
; AUTO-GENERATED FILE - DO NOT EDIT BY HAND
;
; generated at: Mon Jun 10 16:59:33 EDT 2019
; basis: 17818
;
; AUTO-GENERATED FILE - DO NOT EDIT BY HAND
; AUTO-GENERATED FILE - DO NOT EDIT BY HAND


[{:db/ident :hyperfiddle/project
  :project/code "(defn filter-controls [needle #_is-regex]\n  [:div.form-group #_{:class (when (and @is-regex err) \"has-error\")}\n   [:input.form-control\n    {:style {:display \"inline-block\"}                       ; bootstrap styles are half imported, wonky hacks\n     :type \"text\"\n     :on-change #(reset! needle (.. % -target -value))\n     :auto-complete \"off\"\n     #_#_:auto-focus true                                   ; page sroll pos gets lost, otherwise this is great\n     :placeholder \"filter\"}]\n   #_[:span.col-sm-3 [contrib.ui/easy-checkbox-boolean \"regex \" is-regex]]\n   #_(when (and @is-regex err) [:span (ex-message err)])])\n\n(defn parse-regex [needle]\n  (try\n    [nil (re-pattern @needle)]\n    (catch :default e\n      [e #\"\"])))\n\n(defn fiddle-list [ctx]\n  (let [needle (:hyperfiddle.ide.home/needle ctx)]\n    [:<>\n     #_[filter-controls needle #_is-regex]\n     [:div.scroll-wrapper\n      [:table.table-hover\n       [:tbody\n        (->> (hypercrud.browser.context/data ctx)\n          (filter (fn [[fiddle tx]]\n                    (let [s (str (:fiddle/ident fiddle))]\n                      (if false #_@is-regex\n                        (re-seq re s)\n                        (cuerdas.core/includes? s @needle)))))\n          (sort (fn [[a b] [a' b']]\n                  (if (= b b')\n                    (compare (clojure.string/replace (str (:fiddle/ident a)) #\"/\" \".\")\n                             (clojure.string/replace (str (:fiddle/ident a')) #\"/\" \".\"))\n                    (> b b'))\n                  ))\n          (map (fn [[fiddle tx is-entrypoint]]\n                 [:tr {:key (str (hash (:fiddle/ident fiddle)))}\n                  [:td\n                   (if is-entrypoint\n                     (let [route [:hyperfiddle.ide/edit [(:fiddle/ident fiddle)]]]\n                       #_[:div (pr-str {:route route})]\n                       [hyperfiddle.ui/anchor ctx {:route route} (str (:fiddle/ident fiddle))])\n                     (str (:fiddle/ident fiddle)))\n                   ]]))\n          (doall))]]]]\n    ))"
  :project/css "/* Not th â€“ that hits fiddle shortcuts */\ndiv.hyperfiddle.ui div.hyperfiddle.field.-fiddle-pull,\ndiv.hyperfiddle.ui div.hyperfiddle.field.-fiddle-query,\ndiv.hyperfiddle.ui div.hyperfiddle.field.-fiddle-cljs-ns,\ndiv.hyperfiddle.ui div.hyperfiddle.field.-fiddle-renderer,\ndiv.hyperfiddle.ui div.hyperfiddle.field.-fiddle-css,\ndiv.hyperfiddle.ui div.hyperfiddle.field.-fiddle-markdown { display: block !important; }"}
 #:attribute{:ident :attribute/renderer
             :renderer "hyperfiddle.ui.controls/code"}
 #:attribute{:ident :database.custom-security/client
             :renderer "hyperfiddle.ui.controls/code"}
 #:attribute{:ident :database.custom-security/server
             :renderer "hyperfiddle.ui.controls/code"}
 #:attribute{:ident :domain/code
             :renderer "hyperfiddle.ui.controls/code"}
 #:attribute{:ident :domain/css
             :renderer "hyperfiddle.ui.controls/css"}
 #:attribute{:ident :domain/environment
             :renderer "hyperfiddle.ui.controls/code"}
 #:attribute{:ident :domain/home-route
             :renderer "(let [parse-string (fn [s]                      (-> (contrib.reader/read-edn-string! s)                          hyperfiddle.route/validate-route+                          (cats.monad.either/branch (fn [e] (throw e)) (constantly s))))       to-string identity]   (fn [val ctx & [props]]     (let [props (-> (assoc props                       :value val                       :on-change (hyperfiddle.ui.util/with-entity-change! ctx)                       :mode \"clojure\"                       :linkNumbers false)                     (update :mode #(or % \"clojure\")))]       [contrib.ui/debounced props contrib.ui/validated-cmp parse-string to-string contrib.ui.codemirror/-codemirror])))"}
 #:attribute{:ident :domain/router
             :renderer "hyperfiddle.ui.controls/code"}
 #:attribute{:ident :fiddle/cljs-ns
             :renderer "(fn [value ctx props]\n  (let [props (assoc props :debounce/interval contrib.ui/default-debounce-ms)]\n    [hyperfiddle.ui.controls/code value ctx props]))"}
 #:attribute{:ident :fiddle/css
             :renderer "hyperfiddle.ui.controls/css"}
 #:attribute{:ident :fiddle/markdown
             :renderer "(fn [value ctx props]\n  (let [props (assoc props :debounce/interval contrib.ui/default-debounce-ms)]\n    [hyperfiddle.ui.controls/markdown-editor value ctx props]))"}
 #:attribute{:ident :fiddle/pull
             :renderer "(fn [value ctx props]\n  (let [props (assoc props :debounce/interval contrib.ui/default-debounce-ms)]\n    [hyperfiddle.ui.controls/code value ctx props]))"}
 #:attribute{:ident :fiddle/query
             :renderer "(fn [value ctx props]\n  (let [props (assoc props :debounce/interval contrib.ui/default-debounce-ms)]\n    [hyperfiddle.ui.controls/code value ctx props]))"}
 #:attribute{:ident :fiddle/renderer
             :renderer "(fn [value ctx props]\n  (let [props (assoc props :debounce/interval contrib.ui/default-debounce-ms)]\n    [hyperfiddle.ui.controls/code value ctx props]))"}
 #:attribute{:ident :fiddle/type
             :renderer "(fn [value ctx props]\n  (let [props (assoc props\n                :class \"qe\"\n                :options [{:value :query :label \"query\"}\n                          {:value :entity :label \"pull\"}\n                          {:value :blank :label \"static\"}])]\n    [hyperfiddle.ui.controls/radio-group value ctx props]))"}
 #:attribute{:ident :project/code
             :renderer "hyperfiddle.ui.controls/code"}
 #:attribute{:ident :project/css
             :renderer "hyperfiddle.ui.controls/css"}
 {:db/id "25"
  :fiddle/ident :database/options-list
  :fiddle/query "[:find (pull $domains ?e [:db/id :database/uri]) ?name\n :in $domains \n :where \n [$domains ?e :database/uri ?uri]\n [(str ?uri) ?suri]\n [(.substring ?suri 28) ?name]]"
  :fiddle/type :query}
 {:db/id "31"
  :fiddle/ident :databases/edit
  :fiddle/links [#:link{:class [:hf/iframe]
                        :fiddle #:db{:id "18"}
                        :path ":database/write-security"}
                 #:link{:class [:hf/remove]
                        :path ":databases/edit"}]
  :fiddle/pull "[:db/id\n :database/uri\n :hyperfiddle/owners\n {:database/write-security [:db/ident]}\n :database.custom-security/client\n :database.custom-security/server\n {:domain.database/_record [:domain.database/name {:domain/_databases [:domain/ident]}]}\n {:domain/_fiddle-database [:domain/ident]}\n :db/doc]"
  :fiddle/pull-database "$domains"
  :fiddle/renderer "(let [custom-sec? (= :hyperfiddle.security/custom @(contrib.reactive/cursor (:hypercrud.browser/data ctx) [:database/write-security :db/ident]))]\n  [:div props\n   #_[hyperfiddle.ui/markdown @(contrib.reactive/fmap :fiddle/markdown (:hypercrud.browser/fiddle ctx)) ctx]\n   [:h2 (-> @(contrib.reactive/fmap (contrib.reactive/comp str :database/uri) (:hypercrud.browser/data ctx))\n            (subs (count \"datomic:free://datomic:4334/\")))]\n   [hyperfiddle.ui/field [:database/uri] ctx hyperfiddle.ui/hyper-control]\n   [hyperfiddle.ui/field [:hyperfiddle/owners] ctx hyperfiddle.ui/hyper-control]\n   [hyperfiddle.ui/field [:database/write-security] ctx hyperfiddle.ui/hyper-control \n    {:options :databases/write-security-options}]\n   (when custom-sec?\n     [hyperfiddle.ui/field [:database.custom-security/client] ctx hyperfiddle.ui/hyper-control])\n   (when custom-sec?\n     [hyperfiddle.ui/field [:database.custom-security/server] ctx hyperfiddle.ui/hyper-control])\n   (hyperfiddle.ui/field [:db/doc] ctx hyperfiddle.ui/hyper-control)\n   #_(hyperfiddle.ui/field [] ctx (fn [val ctx props]\n                                    (hyperfiddle.ui/link :hf/remove ctx)))\n   [:h3 \"Domains\"]\n   [hyperfiddle.ui/field [:domain.database/_record] ctx\n    (fn [val ctx props]\n      (->> val\n           (map (comp :domain/ident :domain/_databases))\n           sort\n           (map (fn [v]\n                  [:li [hyperfiddle.ui/anchor ctx {:route [:domains/edit [v]]} v]]))\n           (into [:ul])))]\n   [hyperfiddle.ui/field [:domain/_fiddle-database] ctx\n    (fn [val ctx props]\n      (->> val\n           (map :domain/ident)\n           sort\n           (map (fn [v]\n                  [:li [hyperfiddle.ui/anchor ctx {:route [:domains/edit [v]]} v]]))\n           (into [:ul])))]])"
  :fiddle/type :entity}
 {:db/id "18"
  :fiddle/ident :databases/write-security-options
  :fiddle/query "[:find (pull $domains ?e [:db/ident])\n :in $domains\n :where\n [$domains ?e :db/ident ?ident]\n [(namespace ?ident) ?ns]\n [(= ?ns \"hyperfiddle.security\")]]"
  :fiddle/type :query}
 {:db/id "2"
  :fiddle/ident :domain.databases/add
  :fiddle/links [#:link{:class [:databases
                                :hf/iframe]
                        :fiddle #:db{:id "25"}
                        :path ":domain.databases/add"}]
  :fiddle/markdown "#### add database to domain"
  :fiddle/pull "[:db/id \n :domain.database/name \n {:domain.database/record \n  [:database/uri]}]"
  :fiddle/pull-database "$domains"
  :fiddle/renderer "(let [{:keys [:hypercrud.browser/fiddle]} ctx]\n  [:div props\n   [hyperfiddle.ui/markdown (:fiddle/markdown @fiddle) ctx]\n   #_[hyperfiddle.ui/field [:domain.database/name] ctx hyperfiddle.ui/hyper-control]\n   [hyperfiddle.ui/field [:domain.database/record] ctx hyperfiddle.ui/hyper-control {:options \"databases\"\n                                                                                     :option-label (comp :database/uri first)}]])"
  :fiddle/type :entity}
 {:db/id "27"
  :fiddle/cljs-ns "(defmethod hyperfiddle.api/render #{:attribute/renderer}\n  [ctx props]\n  [hyperfiddle.ui.controls/code (hyperfiddle.api/data ctx) ctx props])"
  :fiddle/ident :dustingetz/attr-renderers
  :fiddle/query "[:in $src \n :find\n (pull $src ?e [:db/id *])\n :where\n [$src ?e :attribute/renderer]]"
  :fiddle/type :query}
 {:db/id "8"
  :fiddle/cljs-ns "(defmethod hyperfiddle.api/render #{:fiddle/cljs-ns}\n  [ctx props]\n  [hyperfiddle.ui.controls/code (hyperfiddle.api/data ctx) ctx props])\n\n(defmethod hyperfiddle.api/render #{:fiddle/pull}\n  [ctx props]\n  [hyperfiddle.ui.controls/code (hyperfiddle.api/data ctx) ctx props])\n\n(defmethod hyperfiddle.api/render #{:fiddle/query}\n  [ctx props]\n  [hyperfiddle.ui.controls/code (hyperfiddle.api/data ctx) ctx props])\n\n(defmethod hyperfiddle.api/render #{:fiddle/type}\n  [ctx props]\n  (let [props (assoc props                \n                :class \"qe\"                \n                :options [{:value :query :label \"query\"}                          \n                          {:value :entity :label \"pull\"}                          \n                          {:value :blank :label \"static\"}])]    \n    [hyperfiddle.ui.controls/radio-group (hyperfiddle.api/data ctx) ctx props]))\n\n(defmethod hyperfiddle.api/render #{:fiddle/css}\n  [ctx props]\n  [hyperfiddle.ui.controls/css (hyperfiddle.api/data ctx) ctx props])\n\n(defmethod hyperfiddle.api/render #{:fiddle/renderer}\n  [ctx props]\n  [hyperfiddle.ui.controls/code (hyperfiddle.api/data ctx) ctx props])"
  :fiddle/ident :dustingetz/fiddle
  :fiddle/pull "[:fiddle/ident\n :db/id\n *]"
  :fiddle/pull-database "$src"
  :fiddle/type :entity}
 {:db/id "29"
  :fiddle/ident :dustingetz/fiddle-index-owned
  :fiddle/markdown "### My fiddles"
  :fiddle/query "[:find \n (pull ?e [:hyperfiddle/starred \n           :fiddle/ident])\n (max ?tx)\n ?entrypoint\n :where \n [?e :fiddle/ident]\n [(ground hyperfiddle.io.bindings/*subject*) ?user-id]\n [?e :hyperfiddle/owners ?user-id]\n [(hyperfiddle.query/entrypoint-fiddle? $ ?e) ?entrypoint]\n [?e _ _ ?tx]]"
  :fiddle/renderer "(let [{:keys [:hypercrud.browser/fiddle]} ctx]\n  [:div props\n   [hyperfiddle.ui/markdown (:fiddle/markdown @fiddle) ctx]\n   #_[hyperfiddle.ui/result val ctx {}]\n   [js/user.domain.fiddle-list ctx]])"
  :fiddle/type :query}
 {:db/id "13"
  :fiddle/ident :dustingetz/fiddle-index-recent
  :fiddle/markdown "### Recently modified fiddles"
  :fiddle/query "[:find \n (pull ?e [:hyperfiddle/starred \n           :fiddle/ident])\n (max ?tx)\n ?entrypoint\n :where \n [?e :fiddle/ident]\n ;(not [?e :dustingetz.post/hidden true])\n [(hyperfiddle.query/entrypoint-fiddle? $ ?e) ?entrypoint]\n [?e _ _ ?tx]\n ]"
  :fiddle/renderer "(let [{:keys [:hypercrud.browser/fiddle]} ctx]\n  [:div props\n   [hyperfiddle.ui/markdown (:fiddle/markdown @fiddle) ctx]\n   #_[hyperfiddle.ui/result val ctx {}]\n   [js/user.domain.fiddle-list ctx]])"
  :fiddle/type :query}
 {:db/id "17"
  :fiddle/ident :dustingetz/fiddle-index-starred
  :fiddle/query "[:find \n (pull ?e [:hyperfiddle/starred \n           :fiddle/ident])\n (max ?tx)\n ?entrypoint\n :where \n [?e :fiddle/ident]\n [?e :hyperfiddle/starred true]\n [(hyperfiddle.query/entrypoint-fiddle? $ ?e) ?entrypoint]\n [?e _ _ ?tx]\n ]"
  :fiddle/renderer "(let [{:keys [:hypercrud.browser/fiddle]} ctx]\n  [:div.container-fluid props\n   [hyperfiddle.ui/markdown (:fiddle/markdown @fiddle) ctx]\n   #_[hyperfiddle.ui/result val ctx {}]\n   [js/user.domain.fiddle-list ctx]])"
  :fiddle/type :query}
 {:db/id "30"
  :fiddle/css "th.hyperfiddle.-link-formula { width: 500px; }"
  :fiddle/ident :dustingetz/migrate
  :fiddle/query "[:find\n (pull ?fiddle [:fiddle/ident])\n (pull ?e [:link/path\n           :link/formula\n           :link/class\n           :db/id])\n :where\n [?fiddle :fiddle/links ?e]\n [?e :link/formula]\n #_(not [?e :link/path])]"
  :fiddle/type :query}
 {:db/id "26"
  :fiddle/css "table.hyperfiddle.-fiddle-links { table-layout: fixed; }\ntable.-fiddle-links th.-hypercrud-browser-path--fiddle-links { width: 60px; }\n\ntable.-fiddle-links td.-hypercrud-browser-path--fiddle-links--link-fiddle { display: flex; }\ntable.hyperfiddle.-fiddle-links td.field.-link-fiddle > select { flex: 0 1 80% !important; } /* line up :new */\n\n.fiddle-editor > .nav > li > a {\n  padding: 3px 6px;\n}\n"
  :fiddle/ident :hyperfiddle/ide
  :fiddle/links [#:link{:class [:hf/remove]
                        :path ":fiddle/ident"}
                 #:link{:class [:hf/remove]
                        :path ":fiddle/links"}
                 #:link{:class [:hf/new]
                        :fiddle #:db{:id "3"}
                        :path ":fiddle/links"}
                 #:link{:class [:hf/iframe]
                        :fiddle #:db{:id "11"}
                        :path ":hyperfiddle/ide"}
                 #:link{:class [:hf/new]
                        :fiddle #:db{:id "35"}
                        :path ":link/fiddle"
                        :tx-fn ":hyperfiddle.ide.fiddles.fiddle-src/new-fiddle"}]
  :fiddle/pull "; synchronized with hyperfiddle.fiddle/browser-pull\n[:db/id\n :fiddle/css\n :fiddle/ident\n {:fiddle/links [:db/id\n                 :link/class\n                 {:link/fiddle [:db/id\n                                :fiddle/ident               ; routing\n                                :fiddle/query               ; validation\n                                :fiddle/type                ; validation\n                                ]}\n                 :link/formula\n                 :link/path\n                 :link/rel\n                 :link/tx-fn]}\n :fiddle/markdown\n :fiddle/pull\n :fiddle/pull-database\n :fiddle/query\n :fiddle/cljs-ns\n :fiddle/renderer\n :fiddle/type\n :fiddle/hydrate-result-as-fiddle\n *                                                          ; For hyperblog, so we can access :hyperblog.post/title etc from the fiddle renderer\n ]"
  :fiddle/renderer "hyperfiddle.ide.fiddles.fiddle-src/fiddle-src-renderer"
  :fiddle/type :entity
  :hyperfiddle/starred true}
 {:db/id "23"
  :fiddle/css ".hyperfiddle-user.-hyperfiddle-topnav.user { padding: 0; }\n.-hyperfiddle-topnav .-account { display: inline-block; }\n\n.-hyperfiddle-topnav button,\n.-hyperfiddle-topnav a { padding: 0 2px; }\n\n.-hyperfiddle-topnav .-hyperfiddle-ide-entry-point-fiddles {\n  max-height: 50vh;\n  overflow-y: auto;\n}"
  :fiddle/ident :hyperfiddle/topnav
  :fiddle/links [#:link{:fiddle #:db{:id "24"}
                        :path ":hyperfiddle/topnav"
                        :tx-fn ":zero"}
                 #:link{:class [:hf/iframe]
                        :fiddle #:db{:id "33"}
                        :formula "(constantly (hyperfiddle.api/tempid! ctx))"
                        :path ":hyperfiddle/topnav"}
                 #:link{:class [:hf/iframe]
                        :fiddle #:db{:id "28"}
                        :path ":hyperfiddle/topnav"}
                 #:link{:fiddle #:db{:id "19"}
                        :path ":hyperfiddle/topnav"}]
  :fiddle/renderer "(hyperfiddle.ide.fiddles.topnav/renderer val ctx props)"
  :fiddle/type :blank
  :hyperfiddle/starred true}
 {:db/id "24"
  :fiddle/cljs-ns "(defmethod hyperfiddle.api/render #{:user/user-id\n                                    :hyperfiddle.ide/account}\n  [ctx props]\n  [:div.hyperfiddle-input-group\n   [:div.input\n    (pr-str (hypercrud.browser.context/data ctx))]])"
  :fiddle/css "img.avatar { border: 1px solid lightgray; border-radius: 50%; width: 80px; }\nimg.avatar { float: left; margin-top: 1rem; margin-right: 1rem; }\n.-hyperfiddle-ide-user-settings h3 { margin-top: 1rem; }"
  :fiddle/ident :hyperfiddle.ide/account
  :fiddle/query "[:in $users\n :find\n (pull $users ?user \n       [:db/id \n        :user/name \n        :user/email \n        :user/last-seen \n        :user/sub \n        :user/picture \n        :user/user-id \n        #_:hyperfiddle.ide/parinfer\n        *])\n .\n :where\n [(ground hyperfiddle.io.bindings/*subject*) ?user-id]\n [$users ?user :user/user-id ?user-id]]\n"
  :fiddle/renderer "(let [user @(:hypercrud.browser/result ctx)]\n  [:div.container-fluid props\n   [:div.p \n    [hyperfiddle.ui/img (:user/picture user) ctx {:class \"avatar\"}]]\n\n   [:h3 \"Hello, \" (:user/name user) \"!\"]\n\n   [:div.p\n    [:form {:action \"/logout\" :method \"post\"}\n     (str \"Last login was \" (or (some-> (:user/last-seen user) .toLocaleDateString) \"â€“\") \".\")\n     \n     [:button.btn.btn-link {:type \"submit\"\n                            :style {:display \"inline\"\n                                    :padding \"0\"\n                                    :margin-left \".25em\"\n                                    :font-size \"inherit\"\n                                    :vertical-align \"inherit\"}}\n      \"logout\"]]\n    ]\n   \n   \n\n   [:div.p [:div {:style {:margin-bottom \"1em\"}}]]\n\n   #_[:div.p \"Feature flags\"]\n   #_(->> (-> ctx :hypercrud.browser/field deref :hypercrud.browser.field/children)\n       (map (fn [{a :hypercrud.browser.field/path-segment}]\n              (when (and (keyword? a) (= (namespace a) \"hyperfiddle.ide\"))\n                ^{:key (str [a])}\n                [hyperfiddle.ui/field [a] ctx])))\n       doall)\n   #_[hyperfiddle.ui/field ['*] ctx]\n   #_[hyperfiddle.ui/link :hyperfiddle.ide.user/domains ctx]\n   \n   #_[:div (pr-str (:user/user-id user))]\n   [hyperfiddle.ui/field [:user/user-id] ctx]])\n"
  :fiddle/type :query}
 {:db/id "16"
  :fiddle/ident :hyperfiddle.ide/attribute-edit
  :fiddle/pull "[:db/id :attribute/ident :attribute/renderer]"
  :fiddle/renderer "(let [{:keys [:hypercrud.browser/fiddle]} ctx]\n  [:div props\n   [hyperfiddle.ui/field [:attribute/ident] ctx hyperfiddle.ui/hyper-control]])"
  :fiddle/type :entity}
 {:db/id "22"
  :fiddle/ident :hyperfiddle.ide/attribute-renderers
  :fiddle/links [#:link{:class [:hf/remove]
                        :path ":attribute/ident"}
                 #:link{:class [:hf/new]
                        :fiddle #:db{:id "16"}
                        :path ":hyperfiddle.ide/domain-attribute-renderers"}]
  :fiddle/query "[:find \n (pull ?e [:attribute/ident\n           :attribute/renderer]) \n :where [?e :attribute/ident]]"
  :fiddle/renderer "(if (= \"nodejs\" *target*)\n  (hyperfiddle.ui.loading/page (hyperfiddle.runtime/domain (:peer ctx)))\n  ; this table is awful on ssr\n  [:div props\n   [hyperfiddle.ui/result val ctx {}]]\n  )"
  :fiddle/type :query}
 {:db/doc "Databases, DNS, API keys, etc"
  :db/id "21"
  :fiddle/cljs-ns "(defmethod hyperfiddle.api/render #{:domain/ident\n                                    :hyperfiddle.ide/domain}\n  [ctx props]\n  [:div \n   [:a (assoc props :href \"/\") \n    (hypercrud.browser.context/v ctx)]])\n\n\n; Information leak\n#_(defmethod hyperfiddle.api/render #{:domain/fiddle-database\n                                    :hyperfiddle.ide/domain}\n  [ctx props]\n  [hyperfiddle.ui.select$/select nil ctx\n   {:options :database/options-list\n    :option-label (comp str :database/uri)}])\n"
  :fiddle/css "div.hyperfiddle.ui div.hyperfiddle.field.-domain-router,\ndiv.hyperfiddle.ui div.hyperfiddle.field.-domain-environment,\ndiv.hyperfiddle.ui div.hyperfiddle.field.-domain-code,\ndiv.hyperfiddle.ui div.hyperfiddle.field.-domain-css\n{ display: block; }\n\n.hyperfiddle-ide table.hyperfiddle { table-layout: fixed; }\n.hyperfiddle-ide th.-db-id { width: 60px; }\n.hyperfiddle-ide th.-domain-database-name { width: 200px; }\n.hyperfiddle-ide td.-db-id button { padding: 0px; }\n.hyperfiddle-ide td.-database-uri > div { padding: 4px 5px; }"
  :fiddle/ident :hyperfiddle.ide/domain
  :fiddle/links [#:link{:class [:hf/remove]
                        :path "$domains :domain/databases"}
                 #:link{:class [:hf/new]
                        :fiddle #:db{:id "2"}
                        :path "$domains :domain/databases"}
                 #:link{:class [:hf/remove]
                        :path ":hyperfiddle.ide/domain"}
                 #:link{:class [:hf/iframe]
                        :fiddle #:db{:id "25"}
                        :path ":hyperfiddle.ide/domain"}]
  :fiddle/pull "[#_:db/id\n :domain/ident\n :hyperfiddle/owners\n {:domain/databases \n  [:db/id \n   :domain.database/name \n   {:domain.database/record\n    [#_:db/id\n     :database/uri]}]}\n {:domain/fiddle-database \n  [#_:db/id \n   :database/uri]}\n :domain/aliases\n :domain/disable-javascript\n :domain/home-route\n :domain/environment]"
  :fiddle/pull-database "$domains"
  :fiddle/renderer "(if (= \"nodejs\" *target*)\n  (hyperfiddle.ui.loading/page (hyperfiddle.runtime/domain (:peer ctx)))\n  ; slow to ssr\n  [:div props\n   [hyperfiddle.ui/result val ctx props]])"
  :fiddle/type :entity}
 {:db/id "34"
  :fiddle/css ".-hyperfiddle-ide-edit {\n  flex: 1 1;\n  overflow-y: auto;\n}\n\n@media (min-width: 576px) {\n  .-hyperfiddle-ide-edit {\n    display: flex;\n  }\n  .-hyperfiddle-ide-edit > div {\n    flex: 1 1 50%;\n  }\n}\n\n.fiddle-editor-col {\n  display: flex;\n  flex-direction: column;\n  min-height: calc(100vh - 22px);\n}\n\n.fiddle-editor-header {\n  padding: .1em .5em;\n  background-color: #d7ebff;\n}\n\n.fiddle-editor-header > label {\n  float: right;\n}\n\n.fiddle-editor {\n  flex: 1 1;\n}\n\n.fiddle-editor > .CodeMirror {\n    height: 100%;\n}\n"
  :fiddle/ident :hyperfiddle.ide/edit
  :fiddle/links [#:link{:class [:hf/iframe]
                        :fiddle #:db{:id "23"}
                        :path ":hyperfiddle.ide/edit"}
                 #:link{:class [:hf/iframe]
                        :fiddle #:db{:id "26"}
                        :formula "(let [[_ [user-fiddle] user-args] @(:hypercrud.browser/route ctx)]\n                (constantly user-fiddle))"
                        :path ":hyperfiddle.ide/edit"}]
  :fiddle/renderer "hyperfiddle.ide.edit/view"}
 {:db/id "28"
  :fiddle/cljs-ns "(def show-all (reagent.core/atom false))\n(def needle (reagent.core/atom \"\"))\n(def regex? (reagent.core/atom false))\n\n(defn narrow-list [xs]\n  (->> xs\n    #_((if @user/show-all identity (partial filter #(-> % :fiddle/ident namespace nil?))))\n    (filter (fn [[fiddle _]]\n              (let [s (str (:fiddle/ident fiddle))]\n                (if @user/regex?\n                  (re-seq re s)\n                  (cuerdas.core/includes? s @user/needle)))))))\n\n(defn sort-by-fiddle-ident [xxs]\n  (->> xxs\n    (sort (fn [[a] [b]]\n            (compare (clojure.string/replace (str (:fiddle/ident a)) #\"/\" \".\")\n                     (clojure.string/replace (str (:fiddle/ident b)) #\"/\" \".\"))))))\n\n(defn links-list [ctx xs]\n  [:table.table-hover\n   [:tbody\n    (->> xs\n      (map (fn [[e :as row]]\n             (let [k (hypercrud.browser.context/row-key ctx row)\n                   ctx (hypercrud.browser.context/row ctx k)]\n               [:tr {:key k}\n                [:td [hyperfiddle.ui/value [0 :hyperfiddle/starred] ctx]]\n                (let [route [:hyperfiddle.ide/edit [(:fiddle/ident e)]]]\n                  [:td [hyperfiddle.ui/anchor ctx {:route route} (str (:fiddle/ident e))]])])))\n      (doall))]])\n\n(defn search-ui []\n  [:div.form-group {:class (when (and @user/regex? err) \"has-error\")}\n   #_[:label.col-sm-2.control-label {:for \"hyperfiddle/entry-point-needle\"} \"Filter\"]\n   #_[:span.col-sm-3 [contrib.ui/easy-checkbox-boolean \"Regex? \" user/regex?]]\n   #_[contrib.ui/easy-checkbox-boolean \"Show all fiddles? \" user/show-all]\n   [:input.col-sm-10.form-control \n    {:type \"text\"\n     :on-change #(reset! user/needle (.. % -target -value))\n     :placeholder \":fiddle/ident filter\"\n     #_#_:auto-focus true  ; page scroll pos gets lost, otherwise this is great\n     :id \"hyperfiddle/entry-point-needle\"\n     :style {:display \"inline-block\"} ; bootstrap styles are half imported, wonky hacks\n     :auto-complete \"off\"}]\n   (when (and @user/regex? err) [:span (ex-message err)])])"
  :fiddle/css ".-hyperfiddle-ide-entry-point-fiddles table {\n  width: 100%;\n}\n.-hyperfiddle-ide-entry-point-fiddles tr > td:first-child {\n  width: 1.5em;\n}"
  :fiddle/ident :hyperfiddle.ide/entry-point-fiddles
  :fiddle/query "[:find \n (pull ?e [:hyperfiddle/starred \n           :fiddle/ident \n           :db/id])\n (max ?tx)\n :where \n [?e :fiddle/ident]\n (or-join [?e]\n          ; todo *subject* unsupported on peer\n          #_(and \n            [(ground hyperfiddle.io.bindings/*subject*) ?user-id]\n            [?e :hyperfiddle/owners ?user-id])\n          [(missing? $ ?e :hyperfiddle/owners)])\n [?e _ _ ?tx]]"
  :fiddle/renderer "(if (= \"nodejs\" *target*)\n  (hyperfiddle.ui.loading/loading-page)\n(let [[err re] (try [nil (re-pattern @user/needle)] (catch :default e [e #\"\"]))\n      [as _] ((juxt filter remove) (comp :hyperfiddle/starred first) val)]\n  [:div.container-fluid props\n   (when (empty? @user/needle)\n     [:<>\n      [:p \"My starred fiddles\"]\n      [user/links-list ctx as]\n      [:p \"My recent fiddles\"]\n      [user/links-list ctx (->> val (sort-by second) reverse (take 5))]])\n   [:p \"All my fiddles\"]\n   [user/search-ui]\n   [user/links-list ctx \n    (user/sort-by-fiddle-ident\n     (user/narrow-list val))]])\n)"
  :fiddle/type :query}
 {:db/id "19"
  :fiddle/css ".hyperfiddle-ide-env-content {\n  flex: 1 1;\n  overflow: auto;\n}"
  :fiddle/ident :hyperfiddle.ide/env
  :fiddle/links [#:link{:class [:hf/iframe]
                        :fiddle #:db{:id "23"}
                        :path ":hyperfiddle.ide/env"}
                 #:link{:class [:hf/iframe]
                        :fiddle #:db{:id "21"}
                        :formula "(constantly #entity[\"$domains\" [:domain/ident (:app-domain-ident (hyperfiddle.runtime/domain (:peer ctx)))]])"
                        :path ":hyperfiddle.ide/env"}
                 #:link{:class [:hf/iframe]
                        :fiddle #:db{:id "1"}
                        :formula "(constantly #entity [\"$\" :hyperfiddle/project])"
                        :path ":hyperfiddle.ide/env"}
                 #:link{:class [:hf/iframe]
                        :fiddle #:db{:id "22"}
                        :path ":hyperfiddle.ide/env"}]
  :fiddle/renderer "[:<>\n [hyperfiddle.ui/ui-from-link\n  (hyperfiddle.data/select ctx :hyperfiddle/topnav) ctx {}] \n\n [:div.container-fluid.hyperfiddle-ide-env-content\n  (if (= \"nodejs\" *target*)\n    (hyperfiddle.ui.loading/page (hyperfiddle.runtime/domain (:peer ctx)))\n    ; this content chunk takes too long to ssr\n    [:<>\n     [:h3 \"Environment\"]\n     (if (-> (hyperfiddle.runtime/domain (:peer ctx))\n           (hyperfiddle.domain/database \"$domains\"))\n       ; $domains exists only with directory service\n       [hyperfiddle.ui/link :hyperfiddle.ide/domain ctx {}]\n       (-> (hyperfiddle.runtime/domain (:peer ctx))\n         :hyperfiddle.ide.domain/user-domain+\n         (cats.monad.either/branch\n          (fn [e] [:pre (js/pprint-str e)])\n          (fn [domain]\n            (->> (for [[label f] [#_:domain/ident\n                                  #_:hyperfiddle/owners\n                                  [\"databases\" hyperfiddle.domain/databases]\n                                  [\"fiddle-dbname\" hyperfiddle.domain/fiddle-dbname]\n                                  #_:domain/aliases\n                                  #_:domain/disable-javascript\n                                  #_:domain/home-route\n                                  [\"environment\" hyperfiddle.domain/environment]]]\n                   [:<> [:dt label] [:dd (contrib.pprint/pprint-str (f domain))]])\n              (into [:dl]))))))\n     [:h5 \"Project\"]\n     [hyperfiddle.ui/link :hyperfiddle.ide/project ctx {}]\n     (when (exists? js/show_renderers)\n       [:<>\n        [:h5 \"Attribute renderers\"]\n        [hyperfiddle.ui/link :hyperfiddle.ide/attribute-renderers ctx {}]])\n     ])\n  ]\n\n [hyperfiddle.ide/ide-stage ctx]]"}
 {:db/id "12"
  :fiddle/ident :hyperfiddle.ide/fiddle-index
  :fiddle/markdown "### Recently modified fiddles"
  :fiddle/query "[:find \n (pull ?e [:hyperfiddle/starred \n           :fiddle/ident])\n (max ?tx)\n ?entrypoint\n :where\n [(ground true) ?entrypoint]\n [?e :fiddle/ident]\n [?e _ _ ?tx]]"
  :fiddle/renderer "(let [{:keys [:hypercrud.browser/fiddle]} ctx]\n  [:div props\n   [hyperfiddle.ui/markdown (:fiddle/markdown @fiddle) ctx]\n   #_[hyperfiddle.ui/result val ctx {}]\n   [js/user.domain.fiddle-list ctx]])"
  :fiddle/type :query}
 {:db/id "11"
  :fiddle/ident :hyperfiddle.ide/fiddle-options
  :fiddle/links [#:link{:class [:hf/remove]
                        :path ":hyperfiddle.ide/fiddle-options"}]
  :fiddle/query "[:find (pull ?link [:db/id :fiddle/ident])\n :where \n (or [?link :fiddle/ident] \n     [?link :fiddle/type])]"
  :fiddle/type :query}
 {:db/id "10"
  :fiddle/cljs-ns "(def needle (reagent.core/atom \"\"))\n\n(defn filter-controls [needle is-regex]\n  [:div.form-group {:class (when (and @is-regex err) \"has-error\")}\n   [:input.form-control\n    {:style {:display \"inline-block\"}                       ; bootstrap styles are half imported, wonky hacks\n     :type \"text\"\n     :on-change #(reset! needle (.. % -target -value))\n     :auto-complete \"off\"\n     #_#_:auto-focus true                                   ; page sroll pos gets lost, otherwise this is great\n     :placeholder \"filter\"}]\n   #_[:span.col-sm-3 [contrib.ui/easy-checkbox-boolean \"regex \" is-regex]]\n   #_(when (and @is-regex err) [:span (ex-message err)])])"
  :fiddle/css "main {\n  flex: 1 1;\n  overflow: auto;\n}"
  :fiddle/ident :hyperfiddle.ide/home
  :fiddle/links [#:link{:class [:hf/iframe]
                        :fiddle #:db{:id "23"}
                        :path ":hyperfiddle.ide/home"}
                 #:link{:class [:hf/iframe]
                        :fiddle #:db{:id "12"}
                        :path ":hyperfiddle.ide/home"}]
  :fiddle/markdown "# :hyperfiddle.ide/home"
  :fiddle/renderer "[:<>\n [hyperfiddle.ui/link :hyperfiddle/topnav ctx] \n [:main.container-fluid props\n  [hyperfiddle.ui/markdown \n   (-> ctx :hypercrud.browser/fiddle deref :fiddle/markdown) ctx]\n  [user.domain/filter-controls user/needle]\n  (let [ctx (assoc ctx :hyperfiddle.ide.home/needle user/needle)]\n    [:div.row\n     [:div.col-sm-12\n      [hyperfiddle.ui/link :hyperfiddle.ide/fiddle-index ctx]]\n     #_[:div.col-sm-6\n      [hyperfiddle.ui/link :dustingetz/fiddle-index-recent ctx]]\n     #_[:div.col-sm-6\n      [hyperfiddle.ui/link :dustingetz/fiddle-index-owned ctx]]])]\n [hyperfiddle.ide/ide-stage ctx]]\n"}
 {:db/id "35"
  :fiddle/css ".-hyperfiddle-ide-new-fiddle > .field { display: flex; }\n.-hyperfiddle-ide-new-fiddle div.field > :first-child { \n  flex: 0 1 7em !important; display: inline; padding-right: 1em; text-align: right; }\n.-hyperfiddle-ide-new-fiddle div.field > :nth-child(2) { flex: 1 1; }"
  :fiddle/ident :hyperfiddle.ide/new-fiddle
  :fiddle/pull "[:db/id :fiddle/ident]"
  :fiddle/renderer "[:div.container-fluid props\n [:h4 \"New fiddle\"]\n [hyperfiddle.ui/field [:fiddle/ident] ctx hyperfiddle.ui/hyper-control\n  {:placeholder \":username/hello-world\"}]]"
  :fiddle/type :entity}
 {:db/id "3"
  :fiddle/css ".-hyperfiddle-ide-new-link .field { display: flex; }\n.-hyperfiddle-ide-new-link div.field > :first-child { \n  flex: 0 1 7em !important; display: inline; padding-right: 1em; text-align: right; }\n.-hyperfiddle-ide-new-link div.field > :nth-child(2) { flex: 1 1; }"
  :fiddle/ident :hyperfiddle.ide/new-link
  :fiddle/markdown "#### new-link\n\n!field(:link/path){placeholder=\":district/region\"}"
  :fiddle/pull "[:link/path\n :db/id]"
  :fiddle/renderer "(let [{:keys [:hypercrud.browser/fiddle]} ctx]\n  [:div.container-fluid props\n   [hyperfiddle.ui/markdown (:fiddle/markdown @fiddle) ctx]])"
  :fiddle/type :entity}
 {:db/id "4"
  :fiddle/ident :hyperfiddle.ide/please-login
  :fiddle/renderer "(let [[please-login tunneled-route] @(:hypercrud.browser/route ctx)\n      state (hyperfiddle.domain/url-encode (hyperfiddle.runtime/domain (:peer ctx)) tunneled-route)\n      href (hyperfiddle.ide/stateless-login-url ctx state)]\n  [:div\n   [:br]\n   [:center [:h3 \"Please \" [:a {:href href} \"login\"]]]])"}
 {:db/id "1"
  :fiddle/ident :hyperfiddle.ide/project
  :fiddle/pull "[:db/id\n :project/code\n :project/css]"
  :fiddle/pull-database "$"
  :fiddle/renderer "(let [{:keys [:hypercrud.browser/fiddle]} ctx]\n  [:div props\n   [hyperfiddle.ui/field [:project/code] ctx hyperfiddle.ui/hyper-control]\n   [hyperfiddle.ui/field [:project/css] ctx hyperfiddle.ui/hyper-control]])"
  :fiddle/type :entity}
 {:db/id "20"
  :fiddle/css ".-hyperfiddle-ide-schema-editor {\n  flex: 1 1;\n  overflow: auto;\n}"
  :fiddle/ident :hyperfiddle.ide/schema
  :fiddle/links [#:link{:class [:hf/iframe]
                        :fiddle #:db{:id "9"}
                        :formula "(constantly (->> @(:hypercrud.browser/route ctx) second first (get (:hyperfiddle.ide.domain/user-dbname->ide (hyperfiddle.runtime/domain (:peer ctx)))) hypercrud.types.DbName/->DbName))"
                        :path ":hyperfiddle.ide/schema"}
                 #:link{:class [:hf/iframe]
                        :fiddle #:db{:id "23"}
                        :path ":hyperfiddle.ide/schema"}]
  :fiddle/renderer "[:<>\n [hyperfiddle.ui/ui-from-link\n  (hyperfiddle.data/select ctx :hyperfiddle/topnav) ctx {}] \n [hyperfiddle.ui/ui-from-link\n  (hyperfiddle.data/select ctx :hyperfiddle.ide/schema-editor) ctx {}]]"}
 {:db/id "9"
  :fiddle/ident :hyperfiddle.ide/schema-editor
  :fiddle/links [#:link{:class [:hf/edit]
                        :fiddle #:db{:id "7"}
                        :formula "(fn [e] [(first (second @(:hypercrud.browser/route ctx))) e])"
                        :path ":db/ident"}
                 #:link{:class [:hf/new]
                        :fiddle #:db{:id "32"}
                        :formula "(constantly [(first (second @(:hypercrud.browser/route ctx))) (hyperfiddle.api/tempid! ctx)])"
                        :path ":db/ident"}]
  :fiddle/query "[:find [(pull $_ ?attr\n              [:db/id\n               :db/ident\n               {:db/valueType [:db/ident]}\n               {:db/cardinality [:db/ident]}\n               {:db/unique [:db/ident]}\n               :db/isComponent :db/fulltext :db/doc]) ...]\n :in $_\n :where [$_ :db.part/db :db.install/attribute ?attr]]"
  :fiddle/renderer "(let [hide-datomic (contrib.reactive/atom true)\n      hide-archived (contrib.reactive/atom true)\n      is-edn (contrib.reactive/atom false)\n      needle (contrib.reactive/atom nil)\n      db-attr? #(<= (:db/id %) 62)\n      archived? #(cuerdas.core/starts-with? (namespace (:db/ident %)) \"zzz\") ; \"zzz/\" and \"zzz.\", we are inconsistent\n      do-filter-reactive (fn [xs]                           ; perf sensitive\n                           (as-> xs xs\n                             (if @hide-datomic (remove db-attr? xs) xs)\n                             (if @hide-archived (remove archived? xs) xs)\n                             (if (contrib.string/blank->nil @needle)\n                               (filter #(cuerdas.core/includes? (-> % :db/ident str) @needle) xs) xs)))]\n  (fn [val ctx props]\n    [:div.container-fluid props\n     [:h3 (str \"Datomic schema for \" (-> (hyperfiddle.runtime/domain (:peer ctx))\n                                       :hyperfiddle.ide.domain/user-dbname->ide\n                                       clojure.set/map-invert\n                                       (get (-> @(:hypercrud.browser/route ctx) second first :dbname))))]\n     [:div [:label [:input {:type \"checkbox\" :checked @hide-datomic :on-change #(swap! hide-datomic not)}] \" hide Datomic system attributes\"]]\n     [:div [:label [:input {:type \"checkbox\" :checked @hide-archived :on-change #(swap! hide-archived not)}] \" hide Hyperfiddle archived attributes\"]]\n     [:div [:label [:input {:type \"checkbox\" :checked @is-edn :on-change #(swap! is-edn not)}] \" EDN view\"]]\n     [contrib.ui/text {:value @needle\n                       :on-change #(do (reset! needle %))}\n      {:placeholder \":task/title\"}]\n     (let [ctx (-> ctx\n                 (update :hypercrud.browser/result (partial contrib.reactive/fmap do-filter-reactive))\n                 (assoc :hyperfiddle.ui/layout :hyperfiddle.ui.layout/table))]\n       (if @is-edn\n         [contrib.ui/code {:value (-> (hypercrud.browser.context/data ctx)\n                                    (->> (sort-by :db/ident)\n                                      (map #(dissoc % :db/id)))\n                                    (contrib.pprint/pprint-str 1000))\n                           :read-only true}]\n         [hyperfiddle.ui/table\n          (fn [ctx]\n            [(hyperfiddle.ui/field [:db/ident] ctx)\n             (hyperfiddle.ui/field [:db/valueType] ctx #(hyperfiddle.ui.controls/string ((comp (fnil name :â€“) :db/ident) %) %2 %3) {:disabled true})\n             (hyperfiddle.ui/field [:db/cardinality] ctx #(hyperfiddle.ui.controls/string ((comp (fnil name :â€“) :db/ident) %) %2 %3) {:disabled true})\n             (hyperfiddle.ui/field [:db/unique] ctx #(hyperfiddle.ui.controls/string ((comp (fnil name :â€“) :db/ident) %) %2 %3) {:disabled true})\n             (hyperfiddle.ui/field [:db/isComponent] ctx)\n             (hyperfiddle.ui/field [:db/fulltext] ctx nil {:disabled true})\n             (hyperfiddle.ui/field [:db/doc] ctx)])\n          ctx\n          {:hyperfiddle.ui.sort/initial-sort [[:db/ident] :asc]}]))]))"
  :fiddle/type :query}
 {:db/id "32"
  :fiddle/ident :hyperfiddle.ide/schema-editor.attribute
  :fiddle/links [#:link{:class [:cardinality-options
                                :hf/iframe]
                        :fiddle #:db{:id "15"}
                        :path ":hyperfiddle.ide/schema-editor.attribute"}
                 #:link{:class [:valueType-options
                                :hf/iframe]
                        :fiddle #:db{:id "6"}
                        :path ":hyperfiddle.ide/schema-editor.attribute"}
                 #:link{:class [:unique-options
                                :hf/iframe]
                        :fiddle #:db{:id "0"}
                        :path ":hyperfiddle.ide/schema-editor.attribute"}]
  :fiddle/pull "[:db/id\n :db/ident\n {:db/valueType [:db/ident]}\n {:db/cardinality [:db/ident]}\n :db/doc\n {:db/unique [:db/ident]}\n :db/isComponent\n :db/fulltext]"
  :fiddle/pull-database "$_"
  :fiddle/renderer "hyperfiddle.ide.fiddles.schema-attribute/renderer"
  :fiddle/type :entity}
 {:db/id "7"
  :fiddle/css ".-hyperfiddle-ide-schema-editor-attribute {\n  flex: 1 1;\n  overflow: auto;\n}"
  :fiddle/ident :hyperfiddle.ide/schema.attribute
  :fiddle/links [#:link{:class [:hf/iframe]
                        :fiddle #:db{:id "23"}
                        :path ":hyperfiddle.ide/schema.attribute"}
                 #:link{:class [:hf/iframe]
                        :fiddle #:db{:id "32"}
                        :formula "(constantly (second @(:hypercrud.browser/route ctx)))"
                        :path ":hyperfiddle.ide/schema.attribute"}]
  :fiddle/renderer "[:<>\n [hyperfiddle.ui/ui-from-link\n  (hyperfiddle.data/select ctx :hyperfiddle/topnav) ctx {}] \n [hyperfiddle.ui/ui-from-link\n  (hyperfiddle.data/select ctx :hyperfiddle.ide/schema-editor.attribute) ctx {}]]"}
 {:db/id "15"
  :fiddle/ident :hyperfiddle.ide/schema.options.cardinality
  :fiddle/query "[:find [(pull $_ ?e [:db/ident]) ...]\n :in $_\n :where\n [$_ ?e :db/ident ?ident]\n [(namespace ?ident) ?ns]\n [(= ?ns \"db.cardinality\")]]"
  :fiddle/type :query}
 {:db/id "0"
  :fiddle/ident :hyperfiddle.ide/schema.options.unique
  :fiddle/query "[:find [(pull $_ ?e [:db/ident]) ...]\n :in $_\n :where\n [$_ ?e :db/ident ?ident]\n [(namespace ?ident) ?ns]\n [(= ?ns \"db.unique\")]]"
  :fiddle/type :query}
 {:db/id "6"
  :fiddle/ident :hyperfiddle.ide/schema.options.valuetype
  :fiddle/query "[:find [(pull $_ ?valueType [:db/ident]) ...]\n :in $_\n :where\n [$_ ?db-part :db.install/valueType ?valueType]\n [$_ ?db-part :db/ident :db.part/db]]"
  :fiddle/type :query}
 {:db/id "33"
  :fiddle/ident :hyperfiddle.ide/topnav-new
  :fiddle/links [#:link{:class [:hf/new]
                        :fiddle #:db{:id "35"}
                        :path ":fiddle/ident"
                        :tx-fn ":hyperfiddle.ide.fiddles.topnav/new-fiddle-tx"}]
  :fiddle/pull "[:fiddle/ident]"
  :fiddle/type :entity}
 {:db/id "14"
  :fiddle/ident :hyperfiddle.ide.user/databases
  :fiddle/markdown "Databases"
  :fiddle/query "[:find [(pull $domains ?db [:database/uri :db/id]) ...]\n :in $domains\n :where\n [(ground hyperfiddle.io.bindings/*subject*) ?user-id]\n [$domains ?db :database/uri]\n [$domains ?db :hyperfiddle/owners ?user-id]]"
  :fiddle/renderer "(let [{:keys [:hypercrud.browser/fiddle]} ctx\n      dbs (hypercrud.browser.context/data ctx)]\n  (when-not (empty? dbs)\n    [:div props\n     [hyperfiddle.ui/markdown (:fiddle/markdown @fiddle) ctx]\n     [:ul\n      (->> (sort-by :database/uri dbs)\n           (map (fn [db]\n                  [:li {:key (hash (:db/id db))} (str (:database/uri db))]))\n           (doall))]]))"
  :fiddle/type :query}
 {:db/id "5"
  :fiddle/ident :hyperfiddle.ide.user/domains
  :fiddle/markdown "Domains"
  :fiddle/query "[:find [(pull $domains ?domain [:domain/ident :db/id]) ...]\n :in $domains\n :where\n [(ground hyperfiddle.io.bindings/*subject*) ?user-id]\n [$domains ?domain :domain/ident]\n [$domains ?domain :hyperfiddle/owners ?user-id]]"
  :fiddle/renderer "(let [{:keys [:hypercrud.browser/fiddle]} ctx]\n  [:div props\n   [hyperfiddle.ui/markdown (:fiddle/markdown @fiddle) ctx]\n   [:ul\n    (->> (hypercrud.browser.context/data ctx)\n      (sort-by :domain/ident)\n      (map (fn [domain]\n             [:li {:key (hash (:db/id domain))}\n              [:a\n               {:href (str \"http://\" (:domain/ident domain) \".\" (:ide-domain (hyperfiddle.runtime/domain (:peer ctx))) \"/\")}\n               (:domain/ident domain)]]))\n      (doall))]])"
  :fiddle/type :query}]
