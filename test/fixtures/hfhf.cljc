(ns fixtures.hfhf
  (:require
    [contrib.datomic]
    [contrib.reader]))


(def schema
  (contrib.datomic/indexed-schema
    [{:db/id 8, :db/ident :db.sys/partiallyIndexed, :db/valueType {:db/ident :db.type/boolean}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "System-assigned attribute set to true for transactions not fully incorporated into the index"} {:db/id 9, :db/ident :db.sys/reId, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "System-assigned attribute for an id e in the log that has been changed to id v in the index"} {:db/id 10, :db/ident :db/ident, :db/valueType {:db/ident :db.type/keyword}, :db/cardinality {:db/ident :db.cardinality/one}, :db/unique {:db/ident :db.unique/identity}, :db/doc "Attribute used to uniquely name an entity."} {:db/id 11, :db/ident :db.install/partition, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/many}, :db/doc "System attribute with type :db.type/ref. Asserting this attribute on :db.part/db with value v will install v as a partition."} {:db/id 12, :db/ident :db.install/valueType, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/many}, :db/doc "System attribute with type :db.type/ref. Asserting this attribute on :db.part/db with value v will install v as a value type."} {:db/id 13, :db/ident :db.install/attribute, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/many}, :db/doc "System attribute with type :db.type/ref. Asserting this attribute on :db.part/db with value v will install v as an attribute."} {:db/id 14, :db/ident :db.install/function, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/many}, :db/doc "System attribute with type :db.type/ref. Asserting this attribute on :db.part/db with value v will install v as a data function."} {:db/id 15, :db/ident :db/excise, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 16, :db/ident :db.excise/attrs, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/many}} {:db/id 17, :db/ident :db.excise/beforeT, :db/valueType {:db/ident :db.type/long}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 18, :db/ident :db.excise/before, :db/valueType {:db/ident :db.type/instant}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 19, :db/ident :db.alter/attribute, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/many}, :db/doc "System attribute with type :db.type/ref. Asserting this attribute on :db.part/db with value v will alter the definition of existing attribute v."} {:db/id 39, :db/ident :fressian/tag, :db/valueType {:db/ident :db.type/keyword}, :db/cardinality {:db/ident :db.cardinality/one}, :db/index true, :db/doc "Keyword-valued attribute of a value type that specifies the underlying fressian type used for serialization."} {:db/id 40, :db/ident :db/valueType, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Property of an attribute that specifies the attribute's value type. Built-in value types include, :db.type/keyword, :db.type/string, :db.type/ref, :db.type/instant, :db.type/long, :db.type/bigdec, :db.type/boolean, :db.type/float, :db.type/uuid, :db.type/double, :db.type/bigint,  :db.type/uri."} {:db/id 41, :db/ident :db/cardinality, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Property of an attribute. Two possible values: :db.cardinality/one for single-valued attributes, and :db.cardinality/many for many-valued attributes. Defaults to :db.cardinality/one."} {:db/id 42, :db/ident :db/unique, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Property of an attribute. If value is :db.unique/value, then attribute value is unique to each entity. Attempts to insert a duplicate value for a temporary entity id will fail. If value is :db.unique/identity, then attribute value is unique, and upsert is enabled. Attempting to insert a duplicate value for a temporary entity id will cause all attributes associated with that temporary id to be merged with the entity already in the database. Defaults to nil."} {:db/id 43, :db/ident :db/isComponent, :db/valueType {:db/ident :db.type/boolean}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Property of attribute whose vtype is :db.type/ref. If true, then the attribute is a component of the entity referencing it. When you query for an entire entity, components are fetched automatically. Defaults to nil."} {:db/id 44, :db/ident :db/index, :db/valueType {:db/ident :db.type/boolean}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Property of an attribute. If true, create an AVET index for the attribute. Defaults to false."} {:db/id 45, :db/ident :db/noHistory, :db/valueType {:db/ident :db.type/boolean}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Property of an attribute. If true, past values of the attribute are not retained after indexing. Defaults to false."} {:db/id 46, :db/ident :db/lang, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Attribute of a data function. Value is a keyword naming the implementation language of the function. Legal values are :db.lang/java and :db.lang/clojure"} {:db/id 47, :db/ident :db/code, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}, :db/fulltext true, :db/doc "String-valued attribute of a data function that contains the function's source code."} {:db/id 50, :db/ident :db/txInstant, :db/valueType {:db/ident :db.type/instant}, :db/cardinality {:db/ident :db.cardinality/one}, :db/index true, :db/doc "Attribute whose value is a :db.type/instant. A :db/txInstant is recorded automatically with every transaction."} {:db/id 51, :db/ident :db/fulltext, :db/valueType {:db/ident :db.type/boolean}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Property of an attribute. If true, create a fulltext search index for the attribute. Defaults to false."} {:db/id 52, :db/ident :db/fn, :db/valueType {:db/ident :db.type/fn}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "A function-valued attribute for direct use by transactions and queries."} {:db/id 62, :db/ident :db/doc, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}, :db/fulltext true, :db/doc "Documentation string for an entity."} {:db/id 63, :db/ident :zzz.hypercrud/audit-user, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Hypercrud audit user"} {:db/id 64, :db/ident :zzz.hypercrud/tx, :db/valueType {:db/ident :db.type/uuid}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Hypercrud tx"} {:db/id 65, :db/ident :zzz.hypercrud/owner, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Hypercrud Owner"} {:db/id 66, :db/ident :zzz.hypercrud/ident, :db/valueType {:db/ident :db.type/keyword}, :db/cardinality {:db/ident :db.cardinality/one}, :db/unique {:db/ident :db.unique/value}, :db/doc "Hypercrud Ident"} {:db/id 67, :db/ident :zzz.domain/ident, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}, :db/unique {:db/ident :db.unique/identity}} {:db/id 68, :db/ident :zzz.database/domain, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 69, :db/ident :zzz.database/query-security, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 70, :db/ident :zzz.database/tx-security, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 71, :db/ident :zzz.database/member, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/many}} {:db/id 72, :db/ident :zzz.database/index-link, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 73, :db/ident :attribute/ident, :db/valueType {:db/ident :db.type/keyword}, :db/cardinality {:db/ident :db.cardinality/one}, :db/unique {:db/ident :db.unique/identity}, :db/doc "FK to schema, they can't be directly on $ schema because attribute renderers are a \"source code\" concern. TODO: move these off domain and into the fiddle repo."} {:db/id 74, :db/ident :zzz.attribute/valueType, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 75, :db/ident :zzz.attribute/cardinality, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 76, :db/ident :zzz.attribute/doc, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 77, :db/ident :zzz.attribute/unique, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 78, :db/ident :zzz.attribute/index, :db/valueType {:db/ident :db.type/boolean}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 79, :db/ident :zzz.attribute/fulltext, :db/valueType {:db/ident :db.type/boolean}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 80, :db/ident :zzz.attribute/isComponent, :db/valueType {:db/ident :db.type/boolean}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 81, :db/ident :zzz.attribute/noHistory, :db/valueType {:db/ident :db.type/boolean}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 82, :db/ident :zzz.attribute/hc-type, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 83, :db/ident :attribute/renderer, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Default attribute renderer, a CLJS var like `hyperfiddle.ui.controls/code`."} {:db/id 84, :db/ident :zzz.hc-type/name, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}, :db/unique {:db/ident :db.unique/value}} {:db/id 85, :db/ident :zzz.hc-type/renderer, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 86, :db/ident :zzz.form/name, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 87, :db/ident :zzz.form/field, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/many}, :db/isComponent true} {:db/id 88, :db/ident :zzz.fiddle/name, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 89, :db/ident :fiddle/renderer, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Reagent expression for the view."} {:db/id 90, :db/ident :fiddle/links, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/many}, :db/isComponent true, :db/doc "Links to other fiddles. Like HTML there are anchors, buttons, and iframes."} {:db/id 91, :db/ident :zzz.link/ident, :db/valueType {:db/ident :db.type/keyword}, :db/cardinality {:db/ident :db.cardinality/one}, :db/unique {:db/ident :db.unique/value}, :db/doc "archived"} {:db/id 92, :db/ident :zzz.fiddle/bindings, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Deprecated internal hook `(fn [ctx] (assoc ctx ...))`"} {:db/id 93, :db/ident :zzz.link/request, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}, :db/isComponent true} {:db/id 94, :db/ident :fiddle/query, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Datomic query datalog. \n\nWarning: no support yet for rules, d/history, d/log or other datomic API access."} {:db/id 95, :db/ident :zzz.link-query/dbhole, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/many}, :db/isComponent true} {:db/id 96, :db/ident :zzz.link-query/find-element, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/many}, :db/isComponent true} {:db/id 97, :db/ident :zzz.link-query/single-result-as-entity?, :db/valueType {:db/ident :db.type/boolean}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 98, :db/ident :zzz.link-entity/connection, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 99, :db/ident :zzz.link-entity/form, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 100, :db/ident :link/fiddle, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Hyperlink target (like `<a href=\"\">` or `<iframe src=\"\">`)"} {:db/id 101, :db/ident :zzz.link/dependent?, :db/valueType {:db/ident :db.type/boolean}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Indicates the target fiddle has a dependency on data from this fiddle. Only set if necessary because it makes the query more expensive."} {:db/id 102, :db/ident :zzz.anchor/find-element, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 103, :db/ident :zzz.anchor/attribute-ref, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 104, :db/ident :zzz.anchor/formula, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 105, :db/ident :zzz.anchor/visible?, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 106, :db/ident :zzz.link/render-inline?, :db/valueType {:db/ident :db.type/boolean}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Embed target fiddle (like an iframe)"} {:db/id 107, :db/ident :link/rel, :db/valueType {:db/ident :db.type/keyword}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "* *:hf/rel*\n* *:hf/new*, *:hf/remove*\n* *:hf/affix*, *:hf/detach*\n* *:hf/iframe*\n* *:hf/self*"} {:db/id 108, :db/ident :link/tx-fn, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "CLJS function that turns a form submission into a Datomic transaction."} {:db/id 109, :db/ident :zzz.anchor/prompt, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 110, :db/ident :zzz.field/attribute-ref, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 111, :db/ident :zzz.field/prompt, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 112, :db/ident :zzz.field/order, :db/valueType {:db/ident :db.type/long}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 113, :db/ident :zzz.field/doc, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 114, :db/ident :zzz.dbhole/name, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 115, :db/ident :zzz.dbhole/value, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 116, :db/ident :zzz.find-element/name, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 117, :db/ident :zzz.find-element/form, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 118, :db/ident :zzz.find-element/connection-ref, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 119, :db/ident :zzz.user/sub, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}, :db/unique {:db/ident :db.unique/identity}} {:db/id 120, :db/ident :zzz.community/name, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 121, :db/ident :zzz.community/url, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 122, :db/ident :zzz.community/neighborhood, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 123, :db/ident :zzz.community/category, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/many}} {:db/id 124, :db/ident :zzz.community/orgtype, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 125, :db/ident :zzz.community/type, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/many}} {:db/id 126, :db/ident :zzz.neighborhood/district, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 127, :db/ident :zzz.district/region, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 128, :db/ident :zzz.district/name, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}, :db/unique {:db/ident :db.unique/identity}} {:db/id 129, :db/ident :zzz.neighborhood/name, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}, :db/unique {:db/ident :db.unique/identity}} {:db/id 130, :db/ident :zzz.post/nav-group, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 131, :db/ident :zzz.post.nav-group/name, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}, :db/unique {:db/ident :db.unique/value}} {:db/id 132, :db/ident :zzz.post/thumbnail, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 133, :db/ident :zzz.todo/completed, :db/valueType {:db/ident :db.type/boolean}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 134, :db/ident :zzz.post/archived?, :db/valueType {:db/ident :db.type/boolean}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 135, :db/ident :zzz.post/hc-route, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 136, :db/ident :zzz.user/name, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 137, :db/ident :zzz.user/email, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 138, :db/ident :zzz.user/picture, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 139, :db/ident :zzz.user/last-seen, :db/valueType {:db/ident :db.type/instant}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 140, :db/ident :zzz.domain/home-route, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 141, :db/ident :zzz.post/title, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 142, :db/ident :zzz.post/content, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 143, :db/ident :zzz.post/date, :db/valueType {:db/ident :db.type/instant}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 144, :db/ident :zzz.post/url, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 145, :db/ident :zzz.post/type, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 146, :db/ident :zzz.post.type/name, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}, :db/unique {:db/ident :db.unique/value}} {:db/id 147, :db/ident :zzz.todo/title, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 148, :db/ident :zzz.post/starred, :db/valueType {:db/ident :db.type/boolean}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 149, :db/ident :zzz.post/summary, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 150, :db/ident :zzz.post/authors, :db/valueType {:db/ident :db.type/long}, :db/cardinality {:db/ident :db.cardinality/many}} {:db/id 151, :db/ident :zzz.user/bio, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 152, :db/ident :zzz.user/title, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 153, :db/ident :zzz.link/create?, :db/valueType {:db/ident :db.type/boolean}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Create a new record (tempid entity)."} {:db/id 154, :db/ident :zzz.link/managed?, :db/valueType {:db/ident :db.type/boolean}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Allocate a \"branch\" (`datomic.api/with`) for this form. This lets a `:link/tx-fn` control the transaction."} {:db/id 155, :db/ident :fiddle/type, :db/valueType {:db/ident :db.type/keyword}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Which Datomic query API"} {:db/id 156, :db/ident :zzz.post.nav-group/index-post, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 157, :db/ident :zzz.field/visible?, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 158, :db/ident :zzz.todo.item/content, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 159, :db/ident :zzz.todo.item/complete?, :db/valueType {:db/ident :db.type/boolean}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 160, :db/ident :zzz.todo.item/priority, :db/valueType {:db/ident :db.type/long}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 161, :db/ident :zzz.todo.item/follow-up, :db/valueType {:db/ident :db.type/instant}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 162, :db/ident :zzz.hypercrud/props, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Map of extra user props for the renderer, e.g. `:disabled` `:label-fn` `:tooltip`"} {:db/id 163, :db/ident :zzz.field/attribute, :db/valueType {:db/ident :db.type/keyword}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 164, :db/ident :zzz.anchor/attribute, :db/valueType {:db/ident :db.type/keyword}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 165, :db/ident :zzz.link/disabled?, :db/valueType {:db/ident :db.type/boolean}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Disabled links are not shown and do not load data"} {:db/id 166, :db/ident :zzz.dbhole/uri, :db/valueType {:db/ident :db.type/uri}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 167, :db/ident :zzz.domain/databases, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/many}, :db/isComponent true} {:db/id 168, :db/ident :zzz.find-element/connection, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}} {:db/id 169, :db/ident :zzz.domain/code-databases, :db/valueType {:db/ident :db.type/ref}, :db/cardinality {:db/ident :db.cardinality/many}, :db/isComponent true} {:db/id 170, :db/ident :zzz.domain/aliases, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/many}, :db/unique {:db/ident :db.unique/identity}} {:db/id 171, :db/ident :zzz.fiddle/entrypoint?, :db/valueType {:db/ident :db.type/boolean}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Deprecated"} {:db/id 172, :db/ident :zzz.fiddle/request, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "No longer used"} {:db/id 173, :db/ident :link/formula, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Deprecated – this is fully managed now."} {:db/id 174, :db/ident :link/path, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Location in a Datomic result like `0 :reg/gender :db/ident`. Find-element index should only be specified for Datomic query forms that permit more than one find-element."} {:db/id 175, :db/ident :fiddle/pull, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Datomic pull expression for the entity addressed by the URL"} {:db/id 176, :db/ident :fiddle/css, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Fiddle CSS. \n\nWarning: CSS is not scoped, please write targetted CSS"} {:db/id 177, :db/ident :fiddle/markdown, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Optional, your :fiddle/renderer may render this."} {:db/id 178, :db/ident :fiddle/ident, :db/valueType {:db/ident :db.type/keyword}, :db/cardinality {:db/ident :db.cardinality/one}, :db/unique {:db/ident :db.unique/identity}, :db/doc "Fiddle identifier used in fiddle URLs.\n\nWarning: changing this breaks fiddle URLs."} {:db/id 179, :db/ident :fiddle/pull-database, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Argument to `datomic.api/pull`, defaults to $"} {:db/id 180, :db/ident :fiddle/cljs-ns, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "ClojureScript `user` namespace, available in :fiddle/renderer.\n\nWarning: No `(ns foo (:require ...))` yet, for now it is always called `user`."} {:db/id 181, :db/ident :fiddle/hydrate-result-as-fiddle, :db/valueType {:db/ident :db.type/boolean}, :db/cardinality {:db/ident :db.cardinality/one}, :db/doc "Experimental. When set, data-sync will interpret this fiddle's arguments as a fiddle, which is a recursion mechanic."} {:db/id 182, :db/ident :zzz.link/class-string, :db/valueType {:db/ident :db.type/string}, :db/cardinality {:db/ident :db.cardinality/many}} {:db/id 183, :db/ident :link/class, :db/valueType {:db/ident :db.type/keyword}, :db/cardinality {:db/ident :db.cardinality/many}, :db/doc "Lets fiddle views select a link by name or class, like `<a class=\"\"`"} {:db/id 184, :db/ident :hyperfiddle/owners, :db/valueType {:db/ident :db.type/uuid}, :db/cardinality {:db/ident :db.cardinality/many}, :db/doc "Used in opt-in entity-level ACLs configured through hyperfiddle.net subdomains"} {:db/id 185, :db/ident :fiddle/uuid, :db/valueType {:db/ident :db.type/uuid}, :db/cardinality {:db/ident :db.cardinality/one}, :db/unique {:db/ident :db.unique/identity}, :db/doc "For creating new fiddles without needing a human to fill in an ident"} {:db/id 186, :db/ident :hyperfiddle/starred, :db/valueType {:db/ident :db.type/boolean}, :db/cardinality {:db/ident :db.cardinality/one}}]))
